demo()
(x <- c(100/4, 108/5, 200/20, sqrt(81), 3*5))
(max(x))
saludo <- function(nombre){ mensaje <- paste(“Hola”, nombre) return(mensaje)
}
saludo <- function(nombre){ mensaje <- paste(“Hola”, nombre) return(mensaje)
}
saludo <- function(nombre){ mensaje <- paste(“Hola”, nombre) return(mensaje)
}
saludo("Yess")
x = c(4000, 9000, 9000, 10000); mean(x)
median(x)
Mode(x) # mode es diferente de Mode (Case sensitive)
library(DescTools)
Mode(x) # mode es diferente de Mode (Case sensitive)
Mode(x) # mode es diferente de Mode (Case sensitive)
x <- c(29, 13, 62, 4, 63, 96, 1, 90, 50, 46)
quantile(x, 0.25) # cuantil del 25%
sort(x)
quantile(x, c(0.25,0.50,0.75)) # Cuartiles
quantile(x, c(0.25,0.50,0.75,1)) # Cuartiles
quantile(x, seq(0.1,0.9, by = 0.1)) # Deciles
IQR(x)
sort(x)
plot(x)
quantile(x, probs = 0.75) - quantile(x, probs = 0.25)
var(x)
sd(x)
set.seed(134)
length(x)
x <- round(rnorm(1000, 175, 6), 1)
length(x)
(rnorm(1000, 175, 6)
plot(x)
set.seed(134)
x <- round(rnorm(1000, 175, 6), 1)
mean(x)
median(x)
library(DescTools)
Mode(x)
quantile(x, seq(0.1,0.9, by = 0.1)
IQR(x)
var(x)
sd(x)
plot(x)
View(iris)
View(iris)
moda <- function(vector){
f.abs <- table(vector) # frecuencias absolutas
max.f.abs <- max(f.abs) # obtenemos la máxima frecuencia absoluta
pos.max <- which(f.abs == max.f.abs) # posición(es) de la(s) máxima(s) frecuencia(s) absoluta(s)
print("La(s) moda(s) es(son): ")
print(names(f.abs[pos.max]))
paste("Con una frecuencia de: ", unique(f.abs[pos.max]))
}
# Pon a prueba la función
x <- sample(1:100, 100, replace = T) # Tomamos una muestra aleatoria de tamaño 100 con reemplazo de los primeros 100 números naturales
table(x) # obtenemos las frecuencias absolutas de los valores de la muestra
moda(x) # obtenemos la moda de los valores de la muestra
x
View(moda)
head(airquality)
View(airquality)
library(dplyr)
str(airquality)
dim(airquality)
bien <- complete.cases(airquality)
dim(bien)
bien
Sum(bien)
sum(bien)
airquality[bien,]
dim(airquality)
new_air <- airquality[bien,]
dim(new_air)
data <- select(airquality, Ozone:Temp)
View(data)
data <- select(airquality, Ozone:Temp)
apply(data, 2, mean)
apply(data, 2, mean, na.rm = T)
(m1 <- apply(na.omit(data), 2, mean))
View(iris)
mediana <- function(vector){
f.abs <- table(vector) # frecuencias absolutas
max.f.abs <- max(f.abs) # obtenemos la máxima frecuencia absoluta
pos.max <- which(f.abs == max.f.abs) # posición(es) de la(s) máxima(s) frecuencia(s) absoluta(s)
print("La(s) moda(s) es(son): ")
print(names(f.abs[pos.max]))
paste("Con una frecuencia de: ", unique(f.abs[pos.max]))
}
# Pon a prueba la función
x <- sample(1:100, 100, replace = T) # Tomamos una muestra aleatoria de tamaño 100 con reemplazo de los primeros 100 números naturales
table(x) # obtenemos las frecuencias absolutas de los valores de la muestra
moda(x) # obtenemos la moda de los valores de la muestra
mediana <- function(vector){
vector <- sort(vector)
if(length(vetor)%%2==0){
resultado <- mean(c(vector[length(vector)/2],vector[length(vector)/2+1]))
}
else {
resultado <- vector [length(vector)/2+0.5]
}
print("La mediana es" )
print(resultado)
}
#f.abs <- table(vector) # frecuencias absolutas
#max.f.abs <- max(f.abs) # obtenemos la máxima frecuencia absoluta
#pos.max <- which(f.abs == max.f.abs) # posición(es) de la(s) máxima(s) frecuencia(s) absoluta(s)
#print("La(s) moda(s) es(son): ")
#print(names(f.abs[pos.max]))
#paste("Con una frecuencia de: ", unique(f.abs[pos.max]))
}
x <- sample(1:100, 100, replace = T)
table(x)
moda(x)
mediana <- function(vector){
vector <- sort(vector)
if(length(vetor)%%2==0){
resultado <- mean(c(vector[length(vector)/2],vector[length(vector)/2+1]))
}
else {
resultado <- vector [length(vector)/2+0.5]
}
print("La mediana es" )
print(resultado)
}
#f.abs <- table(vector) # frecuencias absolutas
#max.f.abs <- max(f.abs) # obtenemos la máxima frecuencia absoluta
#pos.max <- which(f.abs == max.f.abs) # posición(es) de la(s) máxima(s) frecuencia(s) absoluta(s)
#print("La(s) moda(s) es(son): ")
#print(names(f.abs[pos.max]))
#paste("Con una frecuencia de: ", unique(f.abs[pos.max]))
}
x <- sample(1:100, 100, replace = T)
table(x)
moda(x)
mediana <- function(vector){
vector <- sort(vector)
if(length(vetor)%%2==0){
resultado <- mean(c(vector[length(vector)/2],vector[length(vector)/2+1]))
}
else {
resultado <- vector [length(vector)/2+0.5]
}
print("La mediana es" )
print(resultado)
}
}
x <- sample(1:100, 100, replace = T)
table(x)
mediana <- function(vector){
vector<-sort(vector)
if(length(vector)%%2==0){
resultado<-mean(c(vector[length(vector)/2],vector[length(vector)/2+1]))
}
else{
resultado<-vector[length(vector)/2+0.5]
}
print("La mediana es: ")
print(resultado)
}
x <- sample(1:100, 100, replace = T)
table(x)
moda(x)
mediana <- function(vector){
vector<-sort(vector)
if(length(vector)%%2==0){
resultado<-mean(c(vector[length(vector)/2],vector[length(vector)/2+1]))
}
else{
resultado<-vector[length(vector)/2+0.5]
}
print("La mediana es: ")
print(resultado)
}
x <- sample(1:100, 100, replace = T)
table(x)
mediana(x)
mediana <- function(vector){
vector<-sort(vector)
if(length(vector)%%2==0){
resultado<-mean(c(vector[length(vector)/2],vector[length(vector)/2+1]))
}
else{
resultado<-vector[length(vector)/2+0.5]
}
print("La mediana es: ")
print(resultado)
}
x <- sample(1:100, 100, replace = T)
table(x)
mediana(x)
X <- matrix(1:49, ncol = 7)
X
apply(X, 1, mean) # cálculo de la media para las filas
apply(X, 2, median) # cálculo de la mediana para las columnas
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
download.file(url = u1011, destfile = "SP1-1011.csv", mode = "wb")
download.file(url = u1112, destfile = "SP1-1112.csv", mode = "wb")
download.file(url = u1213, destfile = "SP1-1213.csv", mode = "wb")
download.file(url = u1314, destfile = "SP1-1314.csv", mode = "wb")
dir()
lista <- lapply(dir(), read.csv) # Guardamos los archivos en lista
lista <- lapply(dir(getwd(),"*csv"), read.csv)
lista <- lapply(lista, select, c(Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR))
data <- do.call(rbind, lista)
head(data)
dim(data)
? rbind
? do.call
dim(data)
View(data)
View(lista)
rm(lista)
lista <- lapply(dir(getwd(),"*csv"), read.csv)
lista <- lapply(lista, select, c(Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)) # seleccionamos solo algunas columnas de cada data frame
data <- do.call(rbind, lista)
head(data)
dim(data)
rm(lista)
lista <- lapply(dir(getwd(),"*csv"), read.csv)
lista <- lapply(lista, select, c(Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)) # seleccionamos solo algunas columnas de cada data frame
data <- do.call(rbind, lista)
head(data)
dim(data)
# Ejemplo 6. Paquete dplyr y aplicaciones
# El paquete dplyr cuenta con varias funciones muy útiles, para manipular
# y transformar data frames. Una vez instalado el paquete dplyr puede cargarlo
# en R de la siguiente manera (Sin mensajes ni advertencias)
suppressMessages(suppressWarnings(library(dplyr)))
# Vamos a descargar archivos csv que contienen datos del covid-19 para mostrar
# como funcionan algunas funciones del paquete dplr. Las url desde las
# cuales descargamos los datos son las siguientes
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
# Descargamos los datos en nuestro directorio de trabajo con la siguiente instrucción
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
download.file(url = url2, destfile = "st19ncov-muertes.csv", mode = "wb")
# Una vez que hemos descargado los datos importamos los datos de casos
# confirmados y muertes a R
conf <- read.csv("st19ncov-confirmados.csv") #Casos confirmados
suppressMessages(suppressWarnings(library(dplyr)))
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
download.file(url = url2, destfile = "st19ncov-muertes.csv", mode = "wb")
conf <- read.csv("st19ncov-confirmados.csv") #Casos confirmados
View(conf)
dec <- read.csv("st19ncov-muertes.csv")     # Decesos confirmados
str(conf); str(dec)
head(conf); head(dec)
Sconf <- conf[-1, ]
Sdec <- dec[-1, ]
Sconf <- select(Sconf, Country.Region, Date, Value) # País, fecha y acumulado de infectados
Sconf <- rename(Sconf, Country = Country.Region, Fecha = Date, Infectados = Value)
str(Sconf)
Sconf <- mutate(Sconf, Fecha = as.Date(Fecha, "%Y-%m-%d"), Infectados = as.numeric(Infectados))
View(Sconf)
View(Sconf)
str(Sconf)
# Hacemos algo similar con el data frame correspondiente al número
# acumulado de decesos
Sdec <- select(Sdec, Country.Region, Date, Value) # Seleccionamos país, fecha y acumulado de decesos
Sdec <- rename(Sdec, Country = Country.Region, Fecha = Date, Decesos = Value) # Renombramos
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, "%Y-%m-%d"), Decesos = as.numeric(Decesos))
Scm <- merge(Sconf, Sdec) # Unimos infectados y decesos acumulados para cada fecha
dim(Scm)
View(Scm)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sólo a México
View(mex)
mex <- filter(mex, Infectados != 0) # Primer día de infectados
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, ND = c(0, diff(Decesos))) # Nuevos decesos por día
mex <- mutate(mex, Letalidad = round(Decesos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), DDA = lag(Decesos)) # Valores día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCD = Decesos/DDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Días de contingencia
head(mex); tail(mex)
write.csv(mex, "C19Mexico.csv", row.names = FALSE)
ambos.abs19 <- data.frame(table(goles.casa19, goles.visitante19))
#Columnas que contienen los nÃÂºmeros de goles anotados por los equipos
#que jugaron en casa (FTHG) y los goles anotados por los equipos que jugaron como visitante (FTAG)
(goles.casa19 <- liga19$FTHG)
liga19 <- read.csv('SP3.csv')
t <- proc.time() #inicia el cronÃ³metro
proc.time()-t #finaliza el cronÃ³metro
tune.rad = tune(svm, default~., data = Default[train,],
kernel = "radial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
gamma = seq(0.01, 10, 0.5)
)
)
library(dplyr)
library(e1071)
library(ggplot2)
library(ISLR)
tune.rad = tune(svm, default~., data = Default[train,],
kernel = "radial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
gamma = seq(0.01, 10, 0.5)
)
)
train = sample(nrow(Default),
round(nrow(Default)/2))
t <- proc.time() #inicia el cronÃ³metro
tune.rad = tune(svm, default~., data = Default[train,],
kernel = "radial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
gamma = seq(0.01, 10, 0.5)
)
)
proc.time()-t #finaliza el cronÃ³metro
shiny::runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp()
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
names(mtcars)
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp()
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto-01/Solucion_Reto-01')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto-01/Solucion_Reto-01')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
iris <- iris[,-5]
attach(iris)
mc.iris <- cor(iris)
mc.irism <- melt(mc.iris)
# Gráfico de correlaciones
mc.irism %>% ggplot(aes(X1, X2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = 'green', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
library(dplyr)
library(tidyr)
library(reshape)
# Gráfico de correlaciones
mc.irism %>% ggplot(aes(X1, X2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = 'green', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
library(ggplot2)
# Gráfico de correlaciones
mc.irism %>% ggplot(aes(X1, X2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = 'green', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
iris <- iris[,-5]
attach(iris)
mc.iris <- cor(iris)
mc.irism <- melt(mc.iris)
# Gráfico de correlaciones
mc.irism %>% ggplot(aes(X1, X2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = 'green', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Reto1/Reto1')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo-03')
runApp('D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/S08/Ejemplo-03')
runApp('D:/BEDU/Santander/Shiny')
getwd()
setwd("D:\BEDU\Santander\Módulo 2 - Programación y estadística con R\Proyecto")
setwd("D:/BEDU/Santander/Módulo 2 - Programación y estadística con R/Proyecto")
getwd()
dir()
liga19 <- read.csv('SP3.csv')
liga19 <- read.csv('SP3.csv')
library(dplyr)
dim(liga19)
#Obteniendo información de dataframe
str(liga19)
head(liga19); tail(liga19)
#Columnas que contienen los números de goles anotados por los equipos
#que jugaron en casa (FTHG) y los goles anotados por los equipos que jugaron como visitante (FTAG)
(goles.casa19 <- liga19$FTHG)
(goles.visitante19 <- liga19$FTAG)
#Elabora tablas de frecuencias relativas para estimar las siguientes probabilidades:
#La probabilidad (marginal) de que el equipo que juega en casa anote x goles (x = 0, 1, 2, ...)
#La probabilidad (marginal) de que el equipo que juega como visitante anote y goles (y = 0, 1, 2, ...)
#La probabilidad (conjunta) de que el equipo que juega en casa anote x goles y el equipo que juega como visitante anote y goles (x = 0, 1, 2, ..., y = 0, 1, 2, ...)
casa.abs19 <- data.frame(table(goles.casa19))
visita.abs19 <- data.frame(table(goles.visitante19))
ambos.abs <- data.frame(table(goles.casa19, goles.visitante19))
(prob.casa19 <- mutate(casa.abs19, freq.relativa = Freq / sum(Freq)))
(prob.visitante19 <- mutate(visita.abs19, freq.relativa = Freq / sum(Freq)))
(prob.ambos19 <- mutate(ambos.abs, freq.relativa = Freq / sum(Freq)))
#------------------------------------- POSTWORK 2 ---------------------------------------------------------------
# Importa los datos de soccer de las temporadas 2017/2018, 2018/2019 y 2019/2020
liga17 <- read.csv('SP1.csv')
liga18 <- read.csv('SP2.csv')
# Revisa la estructura de de los data frames al usar las funciones: str, head, View y summary
str(liga17); str(liga18); str(liga19)
head(liga17); head(liga18); head(liga19)
View(liga17); View(liga18); View(liga19)
summary(liga17); summary(liga18); summary(liga19)
# Con la función select del paquete dplyr selecciona únicamente las columnas Date, HomeTeam, AwayTeam, FTHG, FTAG y FTR;
# esto para cada uno de los data frames.
library(dplyr)
liga17 <- select(liga17, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
View(liga17)
liga18 <- select(liga18, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
liga19 <- select(liga19, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
View(liga18)
# Asegúrate de que los elementos de las columnas correspondientes de los nuevos data frames sean del mismo tipo.
# Con ayuda de la función rbind forma un único data frame que
# contenga las seis columnas mencionadas en el punto 3.
liga17 <- mutate(liga17, Date = as.Date(Date, "%d/%m/%y"))
View(liga17)
View(liga18)
liga18 <- mutate(liga18, Date = as.Date(Date, "%d/%m/%Y"))
liga19 <- mutate(liga19, Date = as.Date(Date, "%d/%m/%Y"))
temporadas <- rbind(liga17, liga18, liga19)
View(temporadas)
#Calculamos las probabilidades (estimadas) maginales y conjuntas para el DataFrame con las 3 temporadas
(goles.casa <- temporadas$FTHG)
(goles.visitante <- temporadas$FTAG)
#Elaboramos tablas de frecuencias relativas
casa.abs <- data.frame(table(goles.casa))
casa.abs
visita.abs <- data.frame(table(goles.visitante))
visita.abs
ambos.abs <- data.frame(table(goles.casa, goles.visitante))
ambos.abs
(prob.casa <- mutate(casa.abs, freq.relativa = Freq / sum(Freq)*100))
(prob.visitante <- mutate(visita.abs, freq.relativa = Freq / sum(Freq)*100))
(prob.ambos <- mutate(ambos.abs, freq.relativa = Freq / sum(Freq)*100))
#Graficamos (con ggplot2)
library(ggplot2)
library(plotly)
? cbind
grafico.casa <- ggplot(data = prob.casa, aes(x = goles.casa, y = freq.relativa))+
geom_bar(stat = "identity", position = "stack", fill = "steelblue") +
ggtitle("Probabilidad de que anote el equipo de casa") +
ylab("Frecuencia (%)") +
xlab("Goles")
ggplotly(grafico.casa)
#Gráfica de probabilidad de que note equipo visitante
grafico.visitante <- ggplot(data = prob.visitante, aes(x = goles.visitante, y = freq.relativa))+
geom_bar(stat = "identity", position = "stack", fill = "steelblue") +
ggtitle("Probabilidad de que anote el equipo visitante") +
ylab("Frecuencia (%)") +
xlab("Goles")
ggplotly(grafico.visitante)
#Gráfica de calor con ambos con geom_title
grafico.ambos <- ggplot(prob.ambos, aes(x = goles.casa, y = goles.visitante, fill = freq.relativa)) + geom_tile() +
ggtitle("Probabilidades conjuntas estimadas de goles") +
ylab("Goles de equipo visitante") +
xlab("Goles de equipo de casa")
grafico.ambos <- grafico.ambos + guides(fill=guide_legend(title="Recuencia relativa"))
ggplotly(grafico.ambos)
#------------------------------------- POSTWORK 4 --------------------------------------------------------------------------------
library(dplyr)
View(prob.ambos19)
View(prob.ambos)
